{"version":3,"sources":["assets/ht.png","assets/pan-grad.png","components/header.jsx","components/info-box.jsx","components/icon-box.jsx","components/contact-box.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","Header","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","href","src","Logo","Component","Completionist","render","_ref","days","hours","minutes","seconds","completed","info_box_Completionist","toString","padStart","InfoBox","className","style","backgroundImage","concat","Background","index_es","date","Date","renderer","Box","props","header","text","BoxContainer","icons","gi","map","name","i","ContactBox","id","App","content","header_Header","info_box_InfoBox","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae7eb9d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ht.7900ba35.png\";","module.exports = __webpack_public_path__ + \"static/media/pan-grad.1cae7d57.png\";","import React, { Component } from \"react\";\nimport \"./header.css\";\n\nimport Logo from \"../assets/ht.png\";\nexport class Header extends Component {\n    render() {\n        return (\n            <div>\n                <ul>\n                    <li><a href=\"#about\">About</a></li>\n                    <li><a href=\"#contact\">Contact</a></li>\n                    <li><a href=\"#news\">News</a></li>\n                    <li> <img src={Logo} /> </li>\n                </ul>;\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nimport Countdown from \"react-countdown-now\";\n\nimport \"./info-box.css\";\nimport Background from \"../assets/pan-grad.png\";\n\nconst Completionist = () => <span>Hack-A-Ton</span>;\n\nconst render = ({ days, hours, minutes, seconds, completed }) => {\n  if (completed) {\n    return <Completionist />;\n  } else {\n    return <span>{days}D {hours.toString().padStart(2, '0')}:{minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}</span>\n  }\n  \n}\n\nexport class InfoBox extends Component {\n  render() {\n    return (\n      <div className=\"backgroundHeader\" style={{\n        backgroundImage: `url(${Background})`\n      }}>\n      <div className=\"upperImageContainer\">\n        <div className=\"BigText\">\n          <Countdown date={new Date('March 28, 2019 11:00:00')} renderer={render}/>\n        </div>\n        </div>\n      </div>\n        )\n  }\n}\n\n","import React from \"react\";\nimport { GiAcid, GiAbstract044, GiAbstract013, GiAbstract015 } from \"react-icons/gi\";\n\nfunction Box(props) {\n    return(\n          <div className=\"box\">\n            <div className=\"logobox\" />\n            <div className=\"headerbox\">{props.header}</div>\n            <div className=\"textbox\">{props.text}</div>\n          </div>\n    )\n}\n\nexport function BoxContainer() {\n    var icons = [ \n        { header: <GiAcid />,        text: 'Info' },\n        { header: <GiAbstract044 />, text: 'Empresas asistentes' },\n        { header: <GiAbstract013 />, text: 'Organizacion' },\n        { header: <GiAbstract015 />, text: 'Inscripcion' }\n    ].map((name, i) => {\n        return <Box header={name.header} text={name.text} key={i} />\n    })\n\n    return(\n        <div className=\"boxContainer\">\n            {icons}\n        </div>\n    )\n}","import React, { Component } from 'react';\n\nexport function ContactBox() {\n    return (\n        <div className=\"contactBox\" id=\"contact\">\n          <div className=\"contactHeader\">Â¿Quienes somos?</div>\n          <div className=\"contactText\"> Estas listo para hackear mil cosas! </div>\n          <p />\n        </div>\n    )\n}","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport { Header } from './components/header';\nimport { InfoBox } from './components/info-box';\nimport { BoxContainer } from './components/icon-box';\nimport { ContactBox } from './components/contact-box';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> \n        <Header />\n        <InfoBox />\n        <BoxContainer />\n        <p />\n        <ContactBox />\n        <p />\n        {/* <p>\n        Aqui van los logos de las empresas\n        </p>  */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}